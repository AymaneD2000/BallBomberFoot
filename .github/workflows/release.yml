name: Release APK/AAB

on:
  release:
    types: [published]
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v1.4.0

      - name: Get dependencies
        run: flutter packages get

      - name: Build APK
        run: flutter build apk --release # ou "flutter build appbundle --release" pour un AAB

      - name: Archive APK
        uses: actions/upload-artifact@v2
        with:
          name: app-release.apk
          path: build/app/outputs/apk/release/app-release.apk

      - name: Archive AAB
        uses: actions/upload-artifact@v2
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release/app-release.aab

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@master

      - name: Download APK/AAB
        uses: actions/download-artifact@v2
        with:
          name: app-release # nom de l'artefact à télécharger
          path: app

      - name: Publish to Google Play Store
        run: |
          gcloud auth activate-service-account --key-file=service-account.json
          gcloud config set project <project-id> # remplacer <project-id> par l'ID de votre projet Google Play
          gcloud app create --region=<region> # remplacer <region> par la région souhaitée pour votre application
          gcloud alpha play apps upload app/* --apk --track=production # ou "gcloud alpha play apps upload app/* --aab --track=production" pour un AAB
        env:
          PLAY_STORE_API_KEY: ${{ secrets.PLAY_STORE_API_KEY }} # clé d'API de votre compte de service Google Play